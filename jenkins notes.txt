#!/bin/bash
jenkins server runs on 8080 port by default.
#Steps to install Jenkins in AWS :
 https://www.jenkins.io/doc/tutorials/tutorial-for-installing-jenkins-on-AWS/

#Jenkins on AWS 
Jenkins is an open-source automation server that integrates with a number of AWS Services, including: AWS CodeCommit, AWS CodeDeploy, Amazon EC2 Spot, and Amazon EC2 Fleet. You can use Amazon Elastic Compute Cloud (Amazon EC2) to deploy a Jenkins application on AWS.

This tutorial walks you through the process of deploying a Jenkins application. You will launch an EC2 instance, install Jenkins on that instance, and configure Jenkins to automatically spin up Jenkins agents if build abilities need to be augmented on the instance.

#Step1: Create a key pair using Amazon EC2. If you already have one, you can skip to step 3.
Creating a key pair
Creating a key pair helps ensure that the correct form of authentication is used when you install Jenkins.

To create your key pair:

Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ and sign in.

In the navigation pane, under NETWORK & SECURITY, select Key Pairs.

Select Create key pair.

For Name, enter a descriptive name for the key pair. Amazon EC2 associates the public key with the name that you specify as the key name. A key name can include up to 255 ASCII characters. It cannot include leading or trailing spaces.

For File format, select the format in which to save the private key.

For OpenSSH compatibility, select pem.

For PuTTY compatibility, select ppk.

Select Create key pair.

The private key file downloads automatically. The base file name is the name you specified as the name of your key pair, and the file name extension is determined by the file format you chose. Save the private key file in a safe place.

This is the only chance for you to save the private key file.
If you use an SSH client on a macOS or Linux computer to connect to your Linux instance, run the following command to set the permissions of your private key file so that only you can read it.

$ chmod 400 <key_pair_name>.pem
If you do not set these permissions, you cannot connect to your instance using this key pair. For more information, refer to Error: Unprotected private key file.

#Step2: Create a security group for your Amazon EC2 instance. If you already have one, you can skip to step 4.
Creating a security group
A security group acts as a firewall that controls the traffic allowed to reach one or more EC2 instances. When you launch an instance, you can assign it one or more security groups. You add rules that control the traffic allowed to reach the instances in each security group. You can modify a security group’s rules any time, and the new rules take effect immediately.

For this tutorial, you will create a security group and add the following rules:

Allow inbound HTTP access from anywhere.

Allow inbound SSH traffic from your computer’s public IP address so you can connect to your instance.

To create and configure your security group:

Decide who may access your instance. For example, a single computer or all trusted computers on a network. For this tutorial, you can use the public IP address of your computer.

To find your IP address, use the check IP service tool from AWS3 or search for the phrase "what is my IP address" in any search engine.

If you connect through an ISP or from behind your firewall without a static IP address, you will need the range of IP addresses used by client computers. If you don’t know this address range, you can use 0.0.0.0/0 for this tutorial.

This is unsafe for production environments because it allows everyone to access your instance using SSH.
Sign in to the AWS Management Console.

Open the Amazon EC2 console by selecting EC2 under Compute.

Amazon EC2 Services page
In the left-hand navigation bar, select Security Groups, and then select Create Security Group.

Amazon security group creation screen
In Security group name, enter WebServerSG or any preferred name of your choice, and provide a description.

Select your VPC from the list. You can use the default VPC.

On the Inbound tab, add the rules as follows:

Select Add Rule, and then select SSH from the Type list.

Under Source, select Custom, and in the text box, enter the IP address from step 1, followed by /32 indicating a single IP Address. For example, 104.34.241.123/32 is a single IP address, while 198.51.100.2/24 results in a range of 256 IP addresses.

Select Add Rule, and then select HTTP from the Type list.

Select Add Rule, and then select Custom TCP Rule from the Type list.

Under Port Range, enter 8080.

Select Create.

#Step3: Launching an Amazon EC2 instance
Now that you have configured a key pair and security group, you can launch an EC2 instance.

To launch an EC2 instance:

Sign in to the the AWS Management Console.

Open the Amazon EC2 console by selecting EC2 under Compute.

From the Amazon EC2 dashboard, select Launch Instance.

Launching from Amazon
The Choose an Amazon Machine Image (AMI) page displays a list of basic configurations called Amazon Machine Images (AMIs) that serve as templates for your instance. Select the HVM edition of the Amazon Linux AMI.

This configuration is marked Free tier eligible.
Choosing an Amazon Machine Image
Scroll down and select the key pair you created in the creating a key pair section above or any existing key pair you intend to use.

Select Select an existing security group.

Select the WebServerSG security group that you created.

Select Launch Instance.

Review your Amazon launch instance
In the left-hand navigation bar, choose Instances to view the status of your instance. Initially, the status of your instance is pending. After the status changes to running, your instance is ready for use.


# When ever we stop the ec2-server and automatically our jenkins server will stop, but i don't want to run my jenkins server every time after my ec2-server start, for this i will use this command
Note: systemctl enable jenkins
----------------------------------------
 
#Step4: Installing and configuring Jenkins
Now that the Amazon EC2 instance has been launched, Jenkins can be installed properly.
In this step you will deploy Jenkins on your EC2 instance by completing the following tasks:

#Step4.1 Connecting to your Linux instance
After you launch your instance, you can connect to it and use it the same way as your local machine.

Before you connect to your instance, get the public DNS name of the instance using the Amazon EC2 console.

Select the instance and locate Public DNS.

Amazon public DNS

If your instance doesn’t have a public DNS name, open the VPC console, select the VPC, and check the Summary tab. If either DNS resolution or DNS hostnames is no, select Edit and change the value to yes.
Prerequisites
The tool that you use to connect to your Linux instance depends on your operating system.

If your computer runs Windows, you will connect using PuTTY.

If your computer runs Linux or Mac OS X, you will connect using the SSH client.

These tools require the use of your key pair. Be sure that you have created your key pair as described in Creating a key pair.

#Using PuTTY to connect to your instance
From the Start menu, select All Programs > PuTTY > PuTTY.

In the Category pane, select Session, and complete the following fields:

In Host Name, enter ec2-user@public_dns_name.

Ensure that Port is 22.

#Amazon EC2 PuTTY selection
In the Category pane, expand Connection, expand SSH, and then select Auth. Complete the following:

#Select Browse.
Select the .ppk file that you generated for your key pair, as described in Creating a key pair and then select Open.

Select Open to start the PuTTY session.

Selecting and opening a new PuTTY session

#Using SSH to connect to your instance
Use the ssh command to connect to the instance. You will specify the private key (.pem) file and ec2-user@public_dns_name.

$ ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-
100-1.compute-1.amazonaws.com
You will receive a response like the following:

The authenticity of host 'ec2-198-51-100-1.compute1.amazonaws.com (10.254.142.33)' cant be
established.

RSA key fingerprint is 1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f.

Are you sure you want to continue connecting
(yes/no)?
Enter yes.

You will receive a response like the following:

Warning: Permanently added 'ec2-198-51-100-1.compute1.amazonaws.com' (RSA) to the list of known hosts.


# Downloading and installing Jenkins
===================================================================================================
# Install jenkins server on ec2 server (linux)
got to the office jenkins website : https://www.jenkins.io/doc/book/installing/linux/#prerequisites
Login to the linux server using putty or aws cli or console ssh connnect
and go to the cat /etc/os-release (look at Fedora)
[root@devops ~]# cat /etc/os-release
NAME="Amazon Linux"
VERSION="2023"
ID="amzn"
ID_LIKE="fedora"
VERSION_ID="2023"
PLATFORM_ID="platform:al2023"
PRETTY_NAME="Amazon Linux 2023"
ANSI_COLOR="0;33"
CPE_NAME="cpe:2.3:o:amazon:amazon_linux:2023"
HOME_URL="https://aws.amazon.com/linux/"
BUG_REPORT_URL="https://github.com/amazonlinux/amazon-linux-2023"
SUPPORT_END="2028-03-01"


# Look at above ID_LIKE="fedora" and run appropriate commands from the official website, and run below list of commands to install java and jenkins
----------------------------------------------------------
#Ensure that your software packages are up to date on your instance by using the following command to perform a quick software update:
[ec2-user ~]$ sudo yum update –y

# Add the Jenkins repo using the following command:
$ sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
$ sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
$ sudo dnf upgrade

# Add required dependencies for the jenkins package 
#Approach1
# Install Java (Amazon Linux 2):
$ sudo dnf install java-11-openjdk # this is enough 
     #when we run above cmd and if u see Error: Unable to find a match: java-11-openjdk then run below cmd
$ sudo amazon-linux-extras install java-openjdk11 -y
   #if this command not work, then run this command [sudo dnf install java* ] (it will install latest available version of java)

#Install Jenkins
$ sudo dnf install jenkins
$ sudo systemctl daemon-reload

#Approach2
#Install Java (Amazon Linux 2023):
$ [ec2-user ~]$ sudo dnf install java-11-amazon-corretto -y  
              $ java --version 
			  
#Install Jenkins: 
$ sudo yum install jenkins -y
 output:
 ===========================================================================================================================================================
Install  1 Package
Total download size: 94 M
Installed size: 94 M
Downloading Packages:
jenkins-2.387.3-1.1.noarch.rpm                                                                                                          6.2 MB/s |  94 MB     00:15
-----------------------------------------------------------------------------------------------------------------------------------------------------------
#Where is Jenkins package in Linux?
  var\lib\jenkins

#Enable the Jenkins service to start at boot:
$ sudo systemctl enable jenkins

#Start Jenkins as a service:      jenkins status command
$ sudo systemctl start jenkins    systemctl status jenkins

#You can check the status of the Jenkins service using the command:
[ec2-user ~]$ sudo systemctl status jenkins

       To know the status of the jenkins
	   service jenkins status
	   to run the jenkins server
	   service jenkins start
	   to stop the jenkins server
	   service jenkins stop 
	   
# go to security group of ec2 server and add inbound rule for jenkins server
jenkins server runs on 8080 port by default.
custom tcp  port 8080 all ALL ipv4

# Configuring Jenkins
Jenkins is now installed and running on your EC2 instance. To configure Jenkins:
Connect to http://<your_server_public_DNS>:8080 from your browser. You will be able to access Jenkins through its management interface:
	  http://13.234.231.115:8080
	  
# As prompted, enter the password found in /var/lib/jenkins/secrets/initialAdminPassword.
  Use the following command to display this password:
 [ec2-user ~]$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword

After enter password it will open and ask you select install suggest pluggins it will start downloading the suggest pluggis.
#The Jenkins installation script directs you to the Customize Jenkins page. Click Install suggested plugins.
 Once the installation is complete, the Create First Admin User will open. Enter your information, and then select Save and Continue.
It will launch the window for user creation
       username : admin
	   password : admin
	   confirm pwd : admin
	   name: ramireddy
	   email : ramireddyvakamalla@gmail.com
	   click save and continue

Step10: jenkins is ready
Step11: Start using jenkins
Step12: with this jenkins installation is ready

#Click Start Using Jenkins

On the left-hand side, select Manage Jenkins, and then select Manage Plugins.
Select the Available tab, and then enter Amazon EC2 plugin at the top right.

Select the checkbox next to Amazon EC2 plugin, and then select Install without restart.

Jenkins Plugin Manager showing available plugins.
Once the installation is done, select Back to Dashboard.

# Select Configure a cloud if there are no existing nodes or clouds.

Step10: If you already have other nodes or clouds set up, select Manage Jenkins.
	a. Manage nodes and clouds option from Manage Jenkins page
	b. From here, select Clouds.
Step11: Select Add a new cloud, and select Amazon EC2. A collection of new fields appears.
Step12: Click Add under Amazon EC2 Credentials
	a. From the Jenkins Credentials Provider, select AWS Credentials as the Kind.
	b. Scroll down and enter in the IAM User programmatic access keys with permissions to launch EC2 instances and select Add.
	c. Scroll down to select your region using the drop-down, and select Add for the EC2 Key Pair’s Private Key.
	d. From the Jenkins Credentials Provider, select SSH Username with private key as the Kind and set the Username to ec2-user.
	e. Scroll down and select Enter Directly under Private Key, then select Add.
	f. Open the private key pair you created in the creating a key pair step and paste in the contents from "-----BEGIN RSA PRIVATE KEY-----" to "-----END RSA PRIVATE KEY-----". Select Add when completed.
	g. Scroll down to "Test Connection" and ensure it states "Success". Select Save when done
	You are now ready to use EC2 instances as Jenkins agents.

#Before Jenkins Integration with Maven, we have make some global configuration	
===============================================================================
We need to set git , maven and java path for jenkins for this follow below steps
Go to jenkins Dashboard ----> Manage Jenkins ----> Global Tool Configuration 
#First install git, java and maven in ec2 machine and set JAVA and MAVEN for global visibility for this refer Java $ Maven Notes search for nano .bash_profile
#then run mvn version there we will find maven home and java home
$mvn --version
Apache Maven 3.9.1 (2e178502fcdbffc201671fb2537d0cb4b4cc58f8)
Maven home: /opt/maven   #maven home
Java version: 11.0.19, vendor: Amazon.com Inc., runtime: /usr/lib/jvm/java-11-amazon-corretto.x86_64  #JDK Home

# Here sections are there for each one
#Under JDK section
   Name : JAVA
   JAVA_HOME : /usr/lib/jvm/java-11-amazon-corretto.x86_64/
#Under Maven section
   Name: Maven
   MAVEN_HOME : /opt/maven
#Under Git Section
   Name : Git
   Path to Git executable : /usr/bin/git
#run which command to find out where software is installed
$ which git
/usr/bin/git

----------------------------------------------------------------------------------------------------------------------
#Jenkins Freestyle project job creation steps
===================================================================================================================
#Step1: create an simple jenkins job
     for this we can click on New Item or Create job, I will select New Item
     Enter Item Name :  my-first-jenkin-job
	 Select Freestyle project 
     click OK
#Step2: It will open configuration tab
       go to build steps and select shell command
       and the below line 
       echo "today date is $date"	  
       click on apply and save
#Step3: click on Build now.
#Step4: go to build history in the botton left and see the build number and click on that it will open the current build.
       If we want to see complete console output of present build click on console outpu after click on the build number form build history.


======================================================================================================================
#Jenkiins Maven Project Integration Job creation steps

Step1: Now if we want to build the maven project then we need the maven pluggin in jenkins for this go to jenkins 
       http://43.205.117.11:8080
	   go to Dashboard --> manage jenkins ---> Manage Pluggins --> (from right sde bar scroll down) -->Available Pluggins --> search for maven under plugins and check the checkbox (Maven Integration)  --> Click Download now without restart.-----> check the checkbox below Restart jenkins after installation complete .
	   
Step2: No click on New Item and you will see Maven Project now. Give name as maven integration and select Maven Project and click Ok.
       Description : maven git and jenkins integarion
Step3: check Github project 
       project url : https://github.com/RamiReddyFullstackDeveloper/MySpringBootProjects.git   (copy from repo)
	   click advance and Display name is : my spring boot project
Step4: under source code management select Git
       Repo URL : https://github.com/RamiReddyFullstackDeveloper/MySpringBootProjects.git
	   Credentials -->Click Add ---> it will open one popup for username and password
	   username : ramireddy #you can find by hitting git config --list user.name as //this name is genarlly while we push something into git it will ask usernmae that is the name we need to provide here
	    password: //go to github profie setting--->Developer Settings --> personal access token ---> Tokens ---> Generate token 
		#make sure to copy and save the somewhere it won't appear you after close the window.
		password : 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
		check checkbox treat my password is secret
		Id: give any name my-app
		Description: my-app
		Finally click Add.
Step5: now click on Credentials and select the my-app
Step6: now go to Branches to Build section
       select which branch you would like to build, my case am giving jenkins(that i have already created in git repo https://github.com/RamiReddyFullstackDeveloper/MySpringBootProjects.git)
Step7: now go to Build section
       Root Pom : pom.xml
	   Goals and Options: package
Step8: Apply and Save

Step9: in case any build faild and you want to send an email to developer, then click on configure and click on post Steps
      Build Settings 
	    Email Notifications
		Recipients : ramjava1256@gmail.com
		click apply and save.
		
Step10: In case if you want to trigger the build automatially when ever new commit comes to github then got to
         Configure --> Build Triggers ---> check the checkbox POLL SCM schedule 
		 #if you don't know about the scheduler visit the link https://crontab.guru/#1_*_*_*_* it will tells you
		 Now if i want to trigger the build every one minute an going to give  scheduer is 
		 */1 * * * * (every one minute) (it represnets minute, hour day of month , month, day of week)

#For github webhook enable refer this notes only  
#GitHub hook
------------------------------------------------
This is one of the approach instead of jenkins periodically checking the github for changes.
Jenkins asking github that if you have any changes then inform me i wil trigger the build for deploymnet.
Simmple words : When ever change, github will inform jenkins.

#Build Periodic
Check every time is there any changes from git via jenkins

#Poll SCM
jenkins will go to git and checking is there ay changes
  
 
#Build Trigger Section:
----------------------
If we want to enable Github hook in Build Trigger section for github change 
We need to go to gitHub ----> Settings ---> webHooks ----> Add Webhook ---->
 Payload URL : jenkins-hostname ex: http://192.168.17.109:8080/github-webhook/
 Content Type : application/json
 Select Send me Everything.
 

#Jenkins Pipeline project job creation Steps
============================================

